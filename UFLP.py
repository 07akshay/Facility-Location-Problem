# -*- coding: utf-8 -*-
"""Ime639.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LvibXs3RxACHx9WY6V-smSLU44QzaxV5
"""

!pip install pulp

# save numpy array as npy file
import numpy as np
from numpy import asarray
from numpy import save
# define data
# data = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
# save to npy file
np.save('data.npy', data)

# load numpy array from npy file
from numpy import load
# load array
data = load('data.npy')
# print the array
print(data)

from pulp import *
import time

from google.colab import drive
drive.mount('/content/drive')

# with open('/content/drive/MyDrive/Colab Notebooks/cap71.txt') as f:
#     w= [float(x) for x in next(f).split()] # read first line
#     array = []
#     for line in f: # read rest of lines
#         array.append([float(x) for x in line.split()])
# arrf = []
# for i in range(50):
#     lst = []
#     for j in range(3):
#         lst = lst+array[16+i*4+j+1]
#     arrf.append(lst)
# # p represents fixed costs
# p =[]
# for i in range(int(w[0])):
#   p.append(array[i][1])

# #d represents demands
# d =[]
# for i in range(int(w[1])):
#   d.append(array[int(w[0])+i*4][0])
# d

# with open('/content/drive/MyDrive/Colab Notebooks/cap101.txt') as f:
#     w= [float(x) for x in next(f).split()] # read first line
#     array = []
#     for line in f: # read rest of lines
#         array.append([float(x) for x in line.split()])
# arrf = []
# for i in range(int(w[1])):
#     lst = []
#     for j in range(4):
#         lst = lst+array[int(w[0])+i*5+j+1]
#     arrf.append(lst)
# # p represents fixed costs
# p =[]
# for i in range(int(w[0])):
#   p.append(array[i][1])

# #d represents demands
# d =[]
# for i in range(int(w[1])):
#   d.append(array[int(w[0])+i*5][0])
# # arrf
# # d

with open('/content/drive/MyDrive/Colab Notebooks/cap133.txt') as f:
    w= [float(x) for x in next(f).split()] # read first line
    array = []
    for line in f: # read rest of lines
        array.append([float(x) for x in line.split()])
arrf = []
for i in range(int(w[1])):
    lst = []
    for j in range(8):
        lst = lst+array[int(w[0])+i*9+j+1]
    arrf.append(lst)
# p represents fixed costs
p =[]
for i in range(int(w[0])):
  p.append(array[i][1])

#d represents demands
d =[]
for i in range(int(w[1])):
  d.append(array[int(w[0])+i*9][0])
# arrf
# d

# with open('/content/drive/MyDrive/Colab Notebooks/capa.txt') as f:
#     w= [float(x) for x in next(f).split()] # read first line
#     array = []
#     for line in f: # read rest of lines
#         array.append([float(x) for x in line.split()])
# arrf = []
# for i in range(int(w[1])):
#     lst = []
#     for j in range(15):
#         lst = lst+array[int(w[0])+i*16+j+1]
#     arrf.append(lst)
# # p represents fixed costs
# p =[]
# for i in range(int(w[0])):
#   p.append(array[i][1])

# #d represents demands
# d =[]
# for i in range(int(w[1])):
#   d.append(array[int(w[0])+i*16][0])
# # arrf
# # d

# arrf = [[4,6,1,1],[10,1,2,13],[5,18,11,2],[8,2,21,11],[9,11,15,21]]
# d =[100,90,110,120,50]
# p = [110,130,140,160]

t1 = time.time()
Customer = [i+1 for i in range(len(arrf))]
Facility = ['Fac-'+str(i+1) for i in range(len(arrf[0]))]
Demand = {i+1:int(d[i]) for i in range(len(arrf))}
# print(Demand)
Max_Supply = {'Fac-'+str(i+1) : 50000000 for i in range(len(arrf[0]))} 
fixed_cost = {'Fac-'+str(i+1) : p[i] for i in range(len(arrf[0]))}
transportations_cost = {'Fac-'+str(i+1) : {1+j:arrf[j][i] for j in range(len(arrf))} for i in range(len(arrf[0]))}
# print(transportations_cost)
prob = LpProblem("Capacitated Facility Location Problem", LpMinimize)
use_facility = LpVariable.dicts("Use Facility", Facility, 0, 1, LpBinary)
ser_customer = LpVariable.dicts("Service", [(i,j) for i in Customer for j in Facility], 0)
prob += lpSum(fixed_cost[j]*use_facility[j] for j in Facility) + lpSum(transportations_cost[j][i]*ser_customer[(i,j)] for j in Facility for i in Customer)
for i in Customer:
    prob += lpSum(ser_customer[(i,j)] for j in Facility) == 1  # use the value 1 for given data sets -- but use Demand[i] for actual results
for j in Facility:
    prob += lpSum(ser_customer[(i,j)] for i in Customer) <= Max_Supply[j]*use_facility[j]

for i in Customer:
    for j in Facility:
        prob += ser_customer[(i,j)] <= Demand[i]*use_facility[j]
prob.solve()
aks =[]
fi =[]
for i in range(1,len(arrf[0])+1):
  aks =[]
  for j in range(1,len(arrf)+1):
    aks.append(int(ser_customer[(j,'Fac-'+str(i))].varValue))
  # print(aks)
  fi.append(aks)

print("Solution Status = ", LpStatus[prob.status])
Tolerance = 1
for j in Facility:
    if use_facility[j].varValue >= Tolerance:
        print("Estalish Facility at site = ", j)
lst = []
for i in range(len(arrf)):
  for j in range(len(arrf[0])):
    if fi[j][i] ==1:
      lst.append(j)
print(lst)
print("Total Cost = ", value(prob.objective))
t2 = time.time()
print("Time Taken = "+str(t2-t1) + " seconds")